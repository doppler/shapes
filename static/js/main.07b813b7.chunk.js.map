{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","count","hPercent","vPercent","reducer","state","action","type","Object","objectSpread","newState","Error","App","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","match","hash","window","location","Number","concat","react_default","a","createElement","className","App_CountControl","handleCountChange","event","target","value","App_Hcontrol","handleHchange","App_Vcontrol","handleVchange","Array","from","map","_","i","App_Square","assign","key","angle","Square","_ref","style","transform","WebkitClipPath","background","CountControl","_ref2","min","max","step","onChange","Hcontrol","_ref3","Vcontrol","_ref4","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07b813b7.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst MAXCOUNT = 90;\nconst initialState = {\n  count: 23,\n  hPercent: 100,\n  vPercent: 1\n};\n\nconst reducer = (state, action) => {\n  let { count, hPercent, vPercent } = action;\n  switch (action.type) {\n    case \"count\":\n      return { ...state, count };\n    case \"hPercent\":\n      return { ...state, hPercent };\n    case \"vPercent\":\n      return { ...state, vPercent };\n    case \"newState\":\n      return action.newState;\n    default:\n      throw new Error();\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const handleCountChange = event => {\n    dispatch({ type: \"count\", count: Number(event.target.value) });\n  };\n  const handleHchange = event => {\n    dispatch({ type: \"hPercent\", hPercent: Number(event.target.value) });\n  };\n  const handleVchange = event => {\n    dispatch({ type: \"vPercent\", vPercent: Number(event.target.value) });\n  };\n\n  const { count, hPercent, vPercent } = state;\n\n  useEffect(() => {\n    let match;\n    const hash = window.location.hash;\n    match = hash.match(/count=(\\d+)/);\n    if (match) dispatch({ type: \"count\", count: Number(match[1]) });\n    match = hash.match(/hPercent=(\\d+)/);\n    if (match) dispatch({ type: \"hPercent\", hPercent: Number(match[1]) });\n    match = hash.match(/vPercent=(\\d+)/);\n    if (match) dispatch({ type: \"vPercent\", vPercent: Number(match[1]) });\n  }, []);\n\n  useEffect(() => {\n    window.location.hash = `#count=${count}&hPercent=${hPercent}&vPercent=${vPercent}`;\n  }, [count, hPercent, vPercent]);\n\n  return (\n    <div className=\"App\">\n      <CountControl {...{ count, handleCountChange }} />\n      <Hcontrol {...{ hPercent, handleHchange }} />\n      <Vcontrol {...{ vPercent, handleVchange }} />\n      <div className=\"container\">\n        {Array.from(Array(count)).map((_, i) => (\n          <Square\n            key={i}\n            angle={(360 / count) * i}\n            {...{ hPercent, vPercent }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nconst Square = ({ angle, vPercent, hPercent }) => {\n  return (\n    <div\n      className=\"Square\"\n      style={{\n        transform: `rotate(${angle}deg)`,\n        WebkitClipPath: `polygon(50% 0, ${hPercent}% ${vPercent}%, ${100 -\n          hPercent}% ${vPercent}%)`,\n        background: `hsla(${angle}, 100%, 50%, 0.5)`\n      }}\n    />\n  );\n};\nconst CountControl = ({ count, handleCountChange }) => {\n  return (\n    <input\n      type=\"range\"\n      value={count}\n      min={1}\n      max={MAXCOUNT}\n      step={1}\n      onChange={handleCountChange}\n    />\n  );\n};\nconst Hcontrol = ({ hPercent, handleHchange }) => (\n  <input\n    type=\"range\"\n    value={hPercent}\n    min={0}\n    max={100}\n    step={1}\n    onChange={handleHchange}\n  />\n);\nconst Vcontrol = ({ vPercent, handleVchange }) => (\n  <input\n    type=\"range\"\n    value={vPercent}\n    min={1}\n    max={100}\n    step={1}\n    onChange={handleVchange}\n  />\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}